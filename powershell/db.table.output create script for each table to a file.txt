Notes:
  -Guidance @ https://www.red-gate.com/simple-talk/sql/sql-tools/using-powershell-to-generate-table-creation-scripts/
  -Guidance @ https://docs.microsoft.com/en-us/powershell/scripting/samples/using-format-commands-to-change-output-view?view=powershell-6
Preconditions:
  -Assume destination SQL files do not already exist. If this is run and a file with the same name and extension exists, the new contents will be appended and not overwritten. 
Main Success Scenario: 
    1. see below 
    
      # set variables
      $server = "serverName"
      $instance = "default"
      $database = "dbName"
      $schema = "schemaName"
      $path = "sqlserver:\sql\$server\$instance\databases\$database\tables" 

      [reflection.assembly]::LoadWithPartialName("Microsoft.SqlServer.Smo") | out-null 
      $srv = new-object Microsoft.SqlServer.Management.Smo.Server($server)
      $db = $srv.databases[$database]
      $culture = [globalization.cultureinfo]::GetCultures(“allCultures”) | where-object {$_.name -match 'en-US'}

      # pull table objects from SQL server
      # filter on "Schema" and "CreateDate" attributes. 
      $tableset = $db.tables | Where-object {$_.schema -eq $schema -and [DateTime]$_.CreateDate -gt ((get-date).AddDays(-9))} 

      Write-Output "# of tables: " + $tableset.Count

      # export table create script for each table to it's own [table name].sql file
      $filePath = "C:\myPath\"
      foreach ($table in $tableset) 
      { 
        $fileName = $table | select -expand Name
        $file = $filePath + $fileName + ".sql"
        $table.script() | out-file $file -append -ErrorAction stop 
      } 
