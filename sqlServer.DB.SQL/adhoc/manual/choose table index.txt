Choose Table Index
Note:
  - Guidance from https://www.sqlshack.com/designing-effective-sql-server-clustered-indexes/
Preconditions: 
  - TableX has column A
  - Can put only one clustered index on a table
  - Clustered indices store and sort data in the physical order
Main Success Scenario: 
  1. Has unique values for single column A
  2. Create a clustered index using column A
  3. Returning only table columns that are in the clustered index. 
  4. Select statement runs fast.
Alternatives: 
  1a. column A no long has unique values
    1a1. Error occurrs
    1a2. Re-think the index 
  2a. Table has few rows and does not benefit from an index
    2a1. Remove index. 
  2b. Need more than one index on the table
    2b1. Replace clustered index on column A with a non-clustered unique index
  2c. Use of clustered index causes size limit to be reached
    2c1. Replace clustered index on column A with a non-clustered index
  3a. Returning more columns from the table than what are in the Clustered Index
    3a1. Make sure you are still getting a performance gain from the clustered index 
    3a2. Update clustered index to have additional columns, remove clustered index, or replace with non-clustered index
  4a. Length of column values in index are slowing query
    4a1. Try to shorten the values in the column(s). Max allowed is 900 bytes
  4b. Number of columns in index are slowing query
    4a1. Reduce number of columns. Max allowed is 16. 
  4c. Too many changes in column values in index are slowing query
    4c1. Reduce the number of changes to column values
  4d. Column is index are not accessed frequently. 
    4d1. Maybe remove column from index
  4e. Column in index not used in join, order by, or filtered on
    4e1. Remove column from index
  4f. Column is a string type, but I have an integer type I can use
    4f1. See if an index on the integer type column is faster 


