Navigate Git in Visual Studio
Note:
  -Clear "Output" window before each Git action so you can see the technical details of that git action. It may help you trouble shoot
  -Refresh History window to see version changes
  -xxx:fill, need to clarify what stash and staging is for
Main Success Scenario:
 1. "Discard Change"
 2. "Add File"
 3. "Change File"
 4. "Get Latest File from Server"
 5. "Revert Changes after Commit but before Push to Server"
 6. "Revert Changes after Commit and after Push to Server"
 7. "Time of Last Pull from Server"
 8. "Time of Last Push to Server"
 
Discard Change
Main Success Scenario:
  1. Open "Team Explorer" sidebar
  2. Choose "Synchronization" from top of sidebar
  3. Go to "Outgoing Commits" section 
  4. Right click change
  5. Choose "View Commit Details" from the context menu
  6. Choose "Reset and Delete Changes" from "Reset" drop down
  
Add File
Main Success Scenario:
  1. Open "Solution Explorer" sidebar
  2. Right click on a folder
  3. Choose "Add" then "New File" from context menu
  4. Specify file name with extension
  5. green plus sign appears to left of file in Solution Explorer
  6. Go to Team Explorer on left sidebar
  7. Change top drop down to "Changes"
  8. See your new file under "Changes"
  9. Enter comment in text box
  10. Choose "Commit All and Push" from the "Commit All" drop down
  11. 

Change File
Note:
  -"Changes" section shows changes that are on your local
  -You will be committing all changes you see below in the "Changes" section
  -"Outgoing Commits" section can be slow to reflect the changes that are pushed
  -Trying to push a change to a file when you did not update the latest version can cause an error when you try to push a change to the server. This is more likely to occur when updating a binary file. 
Main Success Scenario:
  1. Open "Solution Explorer" sidebar
  2. Right click on file and choose "Open" from context menu
  3. Change file and save change
  4. Red check mark appears to the left of the file name
  5. Go to Team Explorer on the sidebar
  6. Choose "Changes" from the drop down at the top. 
  7. See your changed file under "Changes" section
  7.5. "Remove Changes You Don't Want to Commit"
  8. Write comment in text box and note a work item ID in "Relation Work Items" section
  9. Choose "Commit All and Push" from the "Commit All" drop down
  10. Shows "Successfully pushed to origin/master" at top of Team Explorer sidebar
  11. Check the ADO repo web page to see your file and your comment noted in the hitory 
Alternatives: 
  9a. Push of changes to the server was not successful
    9a1. The changes that did not push are listed under the "Outgoing Commits" section. 
    9a2. See the "Output" window to see what went wrong
    
Remove Changes You Don't Want to Commit
Pre-existing Conditions: 
  -On the Team Explorer Side bar with "Changes" on drop down at top
  -Some files in the changes may have had changes becasue they were triggered by related changes you made in files that you were actually changing. 
Main Success Scenario:
  1. Right click on the file and choose "Undo Changes..." on the context menu
  2. Confirm the undo of the pending change when asked
  3. Continue with Step 8 of "Change File"
  
Delete latest change before it is pushed to the server
Note: 
  -May take some time for History window to reflect the delete
Pre-existing Conditions:
  -Change exists in history window that you want to remoe 
  -Change has not been pushed to the server yet
Main Success Scenario:
  1. Right click on the version in the History window and choose 
  2. Choose from the context menu "Reset" then "Delete Changes (--hard)"
  3. xxx:fill in
  
Delete latest change after it has been pushed to the server
Main Success Scenario:
  1.xxx:fill in

Revert Changes after Commit but before Push to Server
Main Success Scenario:
  1. xxx:fill in
  
Revert Changes after Commit and after Push to Server
Note:
  -As of Step 5, the revert will not show as a change on the Team Explorer sidebar with the top drop down set to "Changes"
Main Success Scenario:
  1. View history for the file
  2. Right click on the latest version of the file in the history and choose "Revert" from the context menu. 
  3. Choose "Yes" on the pop-up to confirm the revert on the commit
  4. Open the file from the Solution Explorer side bar to confirm it is the previous version of the file
  5. The red "origin/master" flag on the right side of the History window points to the previous version instead of the most recent version. 
  6. Refresh the History window to see the new Revert entry in the history
  7. xxx: fill in, need to explain how to get the revert reflected on the server
  
Revert a Revert before the original revert was pushed to the server
Pre-existing Conditions: 
  -A revert exists as the latest version in the file history
  -original revert has not been pushed to the server
Main Success Scenario:
  1. Right click on that new version and choose "View Commit Details"
  2. Team Exploer opens on the side bar with the top drop down set to "Commit Details". 
  3. Your file shows in the "Changes" section. 
  4. Click "Revert" link above the "Changes" section
  5. Refersh History window and see a revert of a revert
  6. xxx:fill in, need to explain how to get the revert of a revert reflected on the server
  
Get Latest File from Server
Note:
  -Local History shows changes done on your local or pulled down from the server to your local
  -Remote History shows changes done on the server that have not yet been pulled down to your local
  -Using "Fetch" under "Incoming Commits" will only bring meta data for those files to your local
  -Does using "Pull" link above "Incoming Commits" and below "Branch" name pull all files in the repo? xxx:fill in
Main Successs Scenario:
  1. Open "Team Explorer" side bar
  2. Choose "Synchronization" from the drop down at the top
  3. Under "Incoming Commits" choose "Pull" to get new/updated files that you do not yet have on your local
  4. Right click on file and choose "View History..." from context menu
  5. History window will show Local History and Remote History
  
Delete all Versios of the File
Main Success Scenario:
  1. Right click on file in Solution Explorer and choose "Delete" from context menu
  2. Confirm the permanent deletion of the file on the pop-up
  3. On Team Explorer window choose "Changes" on top drop down. 
  4. Treat the delete like a change you are checking in with the "Change File" use case
  
Time of Last Pull from Server
Main Success Scenario:
  1. "Time of My Last Pull from Server"
  2. "Time of Anyones Last Pull from Server"  

Time of My Last Pull from Server
Main Success Scenario:
  1. Right click on top folder in Solution Explorer window
  2. Choose "View History..." from context menu
  3. History window appears
  4. "Local History" section of the History window shows top change that is saved to your local
  5. If that change was made by another person, you know it was pulled from the server

Time of Last Push to Server
Main Success Scenario:
  1. "Time of my Last Push to Server"
  2. "Time of Anyones Last Push to Server"
 
Time of my Last Push to Server
Main Success Scenario:
  1. xxx:fill in
  
Avoid Branching
Note:
  -Each repository can have one or more branches. The main branch â€” the one where all changes eventually get merged back into, and is called master. This is the official working version of your project, and the one you see when you visit the project repository at github.com/yourname/projectname.
  -The icons next to the two "master" branches (on the Team Explorer sidebar when the top drop down is "Branches") are the same as those found at the top of the Hitory window. 
Main Success Scenario:
  1.On Team Explorer sidebar choose "Synchronization" from top down drown
  2.After Sync is done, "master" in "Branch: master" at the top should be a link
  3.Click on the "master" link
  4.The top drop down changed to "Branches". 
  5.xxx:fill in
  
What is "Show All Files" button at top of Solution Explorer window doing? xxx:fill in
Why is full change history for a file being overwritten on the server? xxx:fill in
Why is the slnx.sqllite file being checked out for changes I make to SQL files? xxx:fill in
