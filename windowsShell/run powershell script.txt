Run PowerShell Script
Note:
  -Guidance @ https://www.techwalla.com/articles/how-to-run-powershell-scripts-from-the-command-line
  -When "-command" attribute is used with powershell.exe, code must be in double quotes
  -Guidance @ https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_special_characters?view=powershell-7#carriage-return-r
  -Use accent character ("`") to indicate new lines in a multi-line powershells script
Main Success Scenario:
  -Access character will convert to a new line when used within double quotes, but not when used within single quotes
  -Guidance @ https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_quoting_rules?view=powershell-7
  1. C:\Example\example_script.ps1
Alternatives:
  1a. Open file to run it
    1a1. Use the "File" menu's "Open" option to navigate to the script and open it
    1a2. click "File" and "Run" to run the script
  1b. Run simple script in command window instead of from a PS1 file
    1b1. powershell.exe Get-Date
  1c. Run complex script in command window instead of from a PS1 file
    1c1. powershell.exe -command "Get-Date"
  1d. Run Powershell script that has multiple lines
    1d1. powershell.exe -command "if (-Not (Test-Path '\\myPath\myFile.csv')){RETURN} ` Write-Output ([datetime](Get-Item '\\myPath\myFile.csv' | Foreach {$_.LastWriteTime})).ToString('yyMMdd_HHmm')"
  1e. Run PowerShell script from a Windows Shell variable
    1e1. See code below
      SET PS_CMD= ^
      if (-Not (Test-Path '\\myPath\myFile.csv')) {RETURN};` ^
      $fileObj = Get-Item '\\myPath\myFile.csv';` ^
      $tmStr = ([datetime]$fileObj.LastWriteTime).ToString('yyMMdd_HHmm');` ^
      $newFileName = 'two.archive.' + $tmStr + '.csv';` ^
      Rename-Item -Path '\\myPath\myFile.csv' -NewName $newFileName; 

      START PowerShell -noexit -command %PS_CMD%
